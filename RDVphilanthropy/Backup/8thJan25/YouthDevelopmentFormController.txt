public without sharing class YouthDevelopmentFormController {
     @AuraEnabled(cacheable=true)
    public static Map<String, List<CaringConnectionsFormController.fieldsWrapper>> getFieldsValues(){
        Map<String, List<CaringConnectionsFormController.fieldsWrapper>> mapOfFieldsValues=new Map<String, List<CaringConnectionsFormController.fieldsWrapper>>();
        mapOfFieldsValues.put('youthrelationship',CaringConnectionsFormController.getFieldsMetadata('Contact','Primary_Guardian_Relationship__c'));
        mapOfFieldsValues.put('OtherGaurgian',CaringConnectionsFormController.getFieldsMetadata('Contact','Other_Guardian_Relationship__c'));
        mapOfFieldsValues.put('HousingType',CaringConnectionsFormController.getFieldsMetadata('Contact','Housing_Type__c')); 
        mapOfFieldsValues.put('guardianState',CaringConnectionsFormController.getFieldsMetadata('Contact','Guardian_State__c')); 
        mapOfFieldsValues.put('genderIdentity',CaringConnectionsFormController.getFieldsMetadata('Contact','GenderIdentity'));
        mapOfFieldsValues.put('School', getSchoolPicklistVal());
        mapOfFieldsValues.put('Grade',CaringConnectionsFormController.getFieldsMetadata('Contact','Grade__c'));
        mapOfFieldsValues.put('Race',CaringConnectionsFormController.getFieldsMetadata('Intake__c','Race__c'));
        mapOfFieldsValues.put('HairColor',CaringConnectionsFormController.getFieldsMetadata('Contact','HairColor__c'));
        mapOfFieldsValues.put('EyeColor',CaringConnectionsFormController.getFieldsMetadata('Contact','EyeColor__c'));
        mapOfFieldsValues.put('HeightFeet',CaringConnectionsFormController.getFieldsMetadata('Contact','Height_In_Feet__c'));
        mapOfFieldsValues.put('HeightInches',CaringConnectionsFormController.getFieldsMetadata('Contact','Height_In_Inches__c'));
        mapOfFieldsValues.put('InterestAreas',CaringConnectionsFormController.getFieldsMetadata('Contact','Interest_Areas__c'));
        mapOfFieldsValues.put('EmergencyRelationship1',CaringConnectionsFormController.getFieldsMetadata('Intake__c','Emergency_Contact_1_Relationship__c'));
        mapOfFieldsValues.put('EmergencyRelationship2',CaringConnectionsFormController.getFieldsMetadata('Intake__c','Emergency_Contact_2_Relationship__c'));
        mapOfFieldsValues.put('ApprovedPickUp1',CaringConnectionsFormController.getFieldsMetadata('Contact','Approved_Pick_Up_1_Relationship__c'));
        mapOfFieldsValues.put('ApprovedPickUp2',CaringConnectionsFormController.getFieldsMetadata('Contact','Approved_Pick_Up_2_Relationship__c'));
        mapOfFieldsValues.put('PickTransport',CaringConnectionsFormController.getFieldsMetadata('Contact','Pick_Transport__c'));
        mapOfFieldsValues.put('HadIllness',CaringConnectionsFormController.getFieldsMetadata('Contact','Had_illness__c'));
        mapOfFieldsValues.put('MentalHealthDiagnosis',CaringConnectionsFormController.getFieldsMetadata('Contact','Mental_Health_History__c'));
        mapOfFieldsValues.put('Allergies',CaringConnectionsFormController.getFieldsMetadata('Contact','Allergies__c'));
        mapOfFieldsValues.put('ChildAttendProgram',CaringConnectionsFormController.getFieldsMetadata('Contact','Child_will_Attend_Afterschool__c'));
        mapOfFieldsValues.put('ReferralSource',CaringConnectionsFormController.getFieldsMetadata('Intake__c','How_did_you_hear_about_us__c'));
        mapOfFieldsValues.put('ReceivePublicAssistance',CaringConnectionsFormController.getFieldsMetadata('Contact','Receive_Public_Assistance__c'));
        mapOfFieldsValues.put('HousingOwnership',CaringConnectionsFormController.getFieldsMetadata('Contact','Housing_Ownership__c'));
        mapOfFieldsValues.put('LengthofTime',CaringConnectionsFormController.getFieldsMetadata('Contact','Length_of_Time_in_Residence__c'));
        mapOfFieldsValues.put('IncomeSource',CaringConnectionsFormController.getFieldsMetadata('Intake__c','Income_Source__c'));
        mapOfFieldsValues.put('MedicationCompliance',CaringConnectionsFormController.getFieldsMetadata('Intake__c','Medication_Compliance__c'));
        mapOfFieldsValues.put('CloseContact',CaringConnectionsFormController.getFieldsMetadata('Contact','Close_Contact_with_COVID_19_Positive_Ind__c'));
        mapOfFieldsValues.put('RecentInternationalTravel',CaringConnectionsFormController.getFieldsMetadata('Contact','Recent_International_Travel__c'));
        mapOfFieldsValues.put('CrowdedHighRiskSetting',CaringConnectionsFormController.getFieldsMetadata('Contact','Exposure_to_Crowded_High_Risk_Setting__c'));
        mapOfFieldsValues.put('COVID19Diagnosis',CaringConnectionsFormController.getFieldsMetadata('Contact','Household_COVID_19_Diagnosis__c'));
        return mapOfFieldsValues;
    }
     @AuraEnabled
    public static Contact upsertParentContact(String parentContactString){
        Contact conObj=(Contact)JSON.deserialize(parentContactString,Contact.class);
        conObj.RecordTypeId=Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Parent/Guardian').getRecordTypeId(); 
        upsert conObj;
        return conObj;
    }
  
     @AuraEnabled
    public static ParentWrapper upsertParentContact1(String parentContactString){
        String RecordTypeId=Schema.SObjectType.Contact.getRecordTypeInfosByName().get('Parent/Guardian').getRecordTypeId();
        ParentWrapper  parentWpr = new ParentWrapper();
        List<Contact> conLst=(List<Contact>) JSON.deserialize(parentContactString,List<Contact>.class);
        List<Contact> contactsToInsert = New List<Contact>();
        Map<Integer, Id> contactIdMap = new Map<Integer, Id>();
        if (!conLst.isEmpty()) {
            for(contact con:conLst){
                con.RecordTypeId = RecordTypeId;
                contactsToInsert.add(con);
            }
            if (!contactsToInsert.isEmpty()) {
                upsert contactsToInsert;
                if(contactsToInsert.size()>0){
                    parentWpr.PrimaryParent =contactsToInsert[0];
                    if(contactsToInsert.size()>1){
                        parentWpr.SecondaryParent =contactsToInsert[1]; 
                    }
                   
                }
              }
         }
        
        return parentWpr;
    }
   
     @AuraEnabled(cacheable=true)
    public static GGFormController.contactIntakeWrapper getExistingRecord(String parentId){
        
        GGFormController.contactIntakeWrapper cIWrapper=new GGFormController.contactIntakeWrapper();  
        if(parentId!='nullId'){
            contact parentRec = new contact();
            List<contact> parentRecLst = new List<contact>();
            List<Contact>childLst = new List<Contact>();
            // get parent contact details from query and assign to wrapper variables 
           parentRecLst=[Select id,FirstName,LastName,HomePhone,Mobile_Phone__c,Housing_Type__c,
                                     Household_Monthly_Income__c,npe01__WorkPhone__c,Primary_Guardian_Relationship__c,
                                     BestTimetoContactGuardian__c,Length_of_Time_in_Residence__c,MailingStreet,MailingCity,MailingState,
                                     MailingPostalCode,npe01__HomeEmail__c,Place_of_Employment__c,
                                     Guardian_Street__c,Guardian_City__c,Guardian_State__c,
                                     Receive_Public_Assistance__c, Income_Source__c, Housing_Ownership__c,
                                     Guardian_Zip__c,Email,GuardianConsentReceived__c,
                                     ClientConsentReceived14YOA__c,WhyHasConsentNotBeenReceived__c,
                                     AdditionalInformationRegardingConsent__c,
                                     Other_Caregiver_First__c,Other_Caregiver_Last__c,
                                     Other_Guardian_Relationship__c,OtherStreet,OtherCity,
                                     OtherState,OtherPostalCode	
                                     from Contact Where Id=:parentId ];
            
            if(parentRecLst!=Null && parentRecLst.size()>0){
                cIWrapper.parentContact =parentRecLst[0];
            }
            else{
                cIWrapper.parentContact = new Contact();
            }
            
            // get Childs  contact details from query and assign to wrapper variables 
            childLst=[Select Id,FirstName,LastName,Case__c,GenderIdentity	
                                    ,Race__c,Weight__c,Height_In_Feet__c,Height_In_Inches__c
                                    ,Identifying_Marks__c,HairColor__c,SSN__c,Grade__c,In_School__c
                                    ,IEP__c,Enrolled_in_Special_Education__c,Education_Concerns__c,Youth_Works__c,Duration_at_Employment__c,Problems_at_Work__c
                                    ,Place_of_Employment__c,Interest_Areas__c,EyeColor__c,Emergency_Contact_First__c
                                    ,Emergency_Contact_Last__c,Emergency_Contact_Phone__c,Emergency_Contact_Relationship__c ,Emergency_Contact_2_First__c
                                    ,Emergency_Contact_2_Last__c,Emergency_Contact_2_Phone__c,Approved_Pick_Up_1__c ,Emergency_Contact_2_Relationship__c
                                    ,Approved_Pick_Up_1_Relationship__c,Approved_Pick_Up_1_Phone__c,Approved_Pick_Up_2__c
                                    ,Approved_Pick_Up_2_Relationship__c,Approved_Pick_Up_2_Phone__c,Physician_Name__c
                                    ,Pick_Transport__c,Alternate_Address__c,Alternate_Address_City__c,Alternate_Address_State__c,Alternate_Address_Zip_Code__c
                                    ,Insurance_Number__c,Last_Physical_MM_YYYY__c,Operations_Injuries__c,Medications__c,Physical_Mental_Health_Needs__c,Medication_Consistency__c,Activities_Limited_by_Physician__c
                                    ,Close_Contact_with_COVID_19_Positive_Ind__c,Recent_International_Travel__c,Exposure_to_Crowded_High_Risk_Setting__c,Household_COVID_19_Diagnosis__c
                                    ,Physician__c, Insurance_Provider__c ,Most_Recent_Vision_Exam__c,Most_Recent_Hearing_Exam__c ,Most_Recent_Dental_Exam__c 
                                    ,Had_illness__c,Mental_Health_History__c,MH_History_Detailed__c
                                    ,Allergies__c,Allergies_Detailed__c,Child_will_Attend_Afterschool__c
                                    ,Name_of_Primary_Parent_Guardian__r.Housing_Type__c
                                    ,Name_of_Primary_Parent_Guardian__r.Length_of_Time_in_Residence__c
                                    ,Name_of_Primary_Parent_Guardian__r.Primary_Guardian_First__c
                                    ,Name_of_Primary_Parent_Guardian__r.Primary_Guardian_Last__c
                                    ,Name_of_Primary_Parent_Guardian__r.firstName
                                    ,Name_of_Primary_Parent_Guardian__r.lastName
                                    ,Name_of_Primary_Parent_Guardian__r.Primary_Guardian_Relationship__c
                                    ,Name_of_Primary_Parent_Guardian__r.MailingStreet
                                    ,Name_of_Primary_Parent_Guardian__r.MailingCity
                                    ,Name_of_Primary_Parent_Guardian__r.MailingState
                                    ,Name_of_Primary_Parent_Guardian__r.MailingpostalCode
                                    ,Name_of_Primary_Parent_Guardian__r.Place_of_Employment__c
                                    ,Name_of_Primary_Parent_Guardian__r.Household_Monthly_Income__c
                                    ,Name_of_Primary_Parent_Guardian__r.HomePhone
                                    ,Name_of_Primary_Parent_Guardian__r.Mobile_Phone__c
                                    ,Name_of_Primary_Parent_Guardian__r.npe01__WorkPhone__c
                                    ,Name_of_Primary_Parent_Guardian__r.Email,birthdate,School__c
                                    ,Name_of_Primary_Parent_Guardian__r.Parent_Authorization_Text__c
                                    ,Name_of_Primary_Parent_Guardian__r.Emergency_Authorization_Text__c
                                    ,Name_of_Primary_Parent_Guardian__r.Parent_Guardian_Permission_Text__c
                                    ,Name_of_Primary_Parent_Guardian__r.Parent_Guardian_Print_Name__c
                                    ,Name_of_Primary_Parent_Guardian__r.Parent_Guardian_Signature__c
                                    ,Name_of_Primary_Parent_Guardian__r.Signature_Date__c
                                    ,Intake__c,Intake__r.How_did_you_hear_about_us__c,Intake__r.Caregiver_Parent__c,Intake__r.Caregiver_Parent__r.FirstName
                                    ,Intake__r.Caregiver_Parent__r.lastName,Intake__r.Caregiver_Parent__r.Primary_Guardian_Relationship__c,Intake__r.Caregiver_Parent__r.MailingStreet
                                    ,Intake__r.Caregiver_Parent__r.MailingCity,Intake__r.Caregiver_Parent__r.MailingState,Intake__r.Caregiver_Parent__r.MailingpostalCode,Intake__r.Caregiver_Parent__r.Place_of_Employment__c
                                    ,Intake__r.Caregiver_Parent__r.HomePhone,Intake__r.Caregiver_Parent__r.Mobile_Phone__c,Intake__r.Caregiver_Parent__r.npe01__WorkPhone__c,Intake__r.Caregiver_Parent__r.Email
                                    ,Intake__r.Youth_Signature__c,Intake__r.Signature_CRRI__c,Intake__r.Signature_FHAA__c,Intake__r.Signature_GGBP__c
                                    ,Intake__r.Signature_PCS__c,Intake__r.Signature_TC__c,Intake__r.Signature_RAFFERPA__c,Intake__r.Signature__c
                                    ,Emergency_Contact__c,Emergency_Contact_2__c
                                    from Contact where RecordType.Name='Client' and Name_of_Primary_Parent_Guardian__c=:parentId ORDER BY createdDate ]; //and Case__c!=Null
         
                 cIWrapper.childContact = childLst;
          
          }
        system.debug('#cIWrapper====>'+cIWrapper);
        return cIWrapper; 
    }

 public static List<CaringConnectionsFormController.fieldsWrapper> getSchoolPicklistVal(){
     List<account>accountRecList= [Select Id,Type,Name From Account Where Type='School' Limit 5];
     List<CaringConnectionsFormController.fieldsWrapper> pickListValues= new List<CaringConnectionsFormController.fieldsWrapper>();  
     CaringConnectionsFormController.fieldsWrapper wprdefVal= new CaringConnectionsFormController.fieldsWrapper();   
     wprdefVal.label= '--Select--';
     wprdefVal.value=  '--Select--';
     
     pickListValues.add(wprdefVal);
     
     if(accountRecList!=Null && accountRecList.size()>0){
         for(Account accObj: accountRecList){
             CaringConnectionsFormController.fieldsWrapper  wprAccObj= new CaringConnectionsFormController.fieldsWrapper();
             if(accObj.name!=null){wprAccObj.label= accObj.name;}
             if(accObj.Id!=null){wprAccObj.value= accObj.id;}
             pickListValues.add(wprAccObj);
          }
     }
     System.debug('##pickListValues----> '+pickListValues);
     return pickListValues;
    }
    
    public class ParentWrapper{
        @AuraEnabled
        public contact PrimaryParent;
        @AuraEnabled
        public contact SecondaryParent;
    }
 }