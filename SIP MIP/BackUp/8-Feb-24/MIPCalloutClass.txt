public class MIPCalloutClass {
    
    public static String requestLogin() {
        
        String username ;
        String password;        
        String org ;
        String endPoint ;
        String baseURL;        
        String reqMethod ;
        String InvoiceReceibableURL;        
        String MIPName = 'MIPDATA';
        String jsonText;
        String AccessToken;
        
        try {
            Http http = new Http();        
            HttpResponse res = new HttpResponse();
            HttpRequest req = new HttpRequest(); 
            MIP_Credential__mdt MIPRec= MIP_Credential__mdt.getInstance(MIPName);
            MIPWrapperClass.LoginWrapper lw = new MIPWrapperClass.LoginWrapper();
            
            system.debug('MIPRec====>'+MIPRec);
            
            if(MIPRec !=Null){
                username =MIPRec.username__c;
                password =MIPRec.password__c;
                org =MIPRec.org__c;
                baseURL =MIPRec.Base_URL__c;
                reqMethod =MIPRec.RequestedMethod__c;
                endPoint = 'https://login.mip.com/api/v1/sso/mipadv/login';
            }
            system.debug('##username====>'+username);
            system.debug('##password====>'+password);
            system.debug('##org====>'+org);
            system.debug('##baseURL====>'+baseURL);
            system.debug('##reqMethod====>'+reqMethod);
            system.debug('##endPoint====>'+endPoint);
            
            //create login request body 
            
            lw.username =username;
            lw.password =password;
            lw.org =org;
            jsonText =JSON.serialize(lw); 
            system.debug('## jsonText ===='+jsonText); 
            
            // create login request
            
            req.setHeader('Content-Type','application/json');
            req.setMethod(reqMethod);
            req.setEndpoint(endPoint);
            req.setBody(jsonText);
            system.debug('## req ===='+req); 
            
            // send request for login and get token
            res = http.send(req);
            if(res.getStatusCode() == 200) {
                System.debug('##Response===>' + res.getBody());
                // String str ='{"RestApiUrl": "https://api.mip.com/","AccessToken": "SI_23653_SYS_M$C_1IqKaky9ly6deFtIGabAmCUBvls1"}';
                Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped( res.getBody());
                Object objToken=(Object)results.get('AccessToken');
                System.debug('##objToken===>'+ objToken); 
                AccessToken=String.valueOf(objToken);
                System.debug('##AccessToken===>'+ AccessToken);     
            }
            
            AccessToken ='SI_23653_SYS_M$C_iPP6FgrTiDEk5fVDfz89zpxIIGw1';
        }
        catch (Exception e){         
            System.debug('Error:' + e.getMessage() + 'LN:' + e.getLineNumber());           
        }
        return AccessToken;
        
        
    }
    public static void requestLogOut() {
        
        String endPoint ;
        String baseURL;        
        String reqMethod ;
        String InvoiceReceibableURL;        
        String MIPName = 'MIPDATA';
        String jsonText;
        String AccessToken ='SI_23653_SYS_M$C_iPP6FgrTiDEk5fVDfz89zpxIIGw1';
        
        try {
            Http http = new Http();        
            HttpResponse res = new HttpResponse();
            HttpRequest req = new HttpRequest(); 
            MIP_Credential__mdt MIPRec= MIP_Credential__mdt.getInstance(MIPName);
            
            system.debug('MIPRec====>'+MIPRec);
            
            if(MIPRec !=Null){
                reqMethod =MIPRec.RequestedMethod__c;
                endPoint = 'https://api.mip.com/api/security/logout';
            }
            
            system.debug('##reqMethod====>'+reqMethod);
            system.debug('##endPoint====>'+endPoint);
            
            //create logout request
            
            req.setHeader('Authorization-Token',AccessToken);
            req.setMethod(reqMethod);
            req.setEndpoint(endPoint);
            
            system.debug('## req ===='+req); 
            
            // send request for logout and get token
            res = http.send(req);
            System.debug('##Response===>' + res.getBody());
            if(res.getStatusCode() == 200) {
                System.debug('##Response===>' + res.getBody());
            }
            
            
        }
        catch (Exception e){         
            System.debug('Error:' + e.getMessage() + 'LN:' + e.getLineNumber());           
        }
        
        
        
    }
    public static String createReceivableSession() {
        
        String endPoint ;
        String baseURL;        
        String reqMethod ;
        String InvoiceReceibableURL;        
        String MIPName = 'MIPDATA';
        String jsonText;
        String AccessToken ='SI_23653_SYS_M$C_iPP6FgrTiDEk5fVDfz89zpxIIGw1';
        String sessionId;
        
        try {
            AccessToken =requestLogin();
            system.debug('##accessToken===>'+AccessToken);
            if(string.isNotEmpty(AccessToken)){
                Http http = new Http();        
                HttpResponse res = new HttpResponse();
                HttpRequest req = new HttpRequest(); 
                MIP_Credential__mdt MIPRec= MIP_Credential__mdt.getInstance(MIPName);
                MIPWrapperClass.ReceivableSessionsWrapper rsw = new MIPWrapperClass.ReceivableSessionsWrapper();
                
                system.debug('MIPRec====>'+MIPRec);
                
                if(MIPRec !=Null){
                    
                    baseURL =MIPRec.Base_URL__c;
                    InvoiceReceibableURL =MIPRec.ReceivableURL__c;
                    reqMethod =MIPRec.RequestedMethod__c;
                    endPoint = baseURL+InvoiceReceibableURL+'/sessions';
                }
                
                system.debug('##baseURL====>'+baseURL);
                system.debug('##reqMethod====>'+reqMethod);
                system.debug('##endPoint====>'+endPoint);
                
                //create session request body 
                sessionId ='API0201013';
                rsw.sessionId =sessionId;
                rsw.status ='BS';
                rsw.description ='Testing Descriptions';
                rsw.date_Z ='02/07/2024';
                
                jsonText =JSON.serialize(rsw);
                jsonText =jsonText.replace('date_Z','date');
                system.debug('## jsonText ===='+jsonText); 
                
                
                // create session request
                
                req.setHeader('Authorization-Token',AccessToken);
                req.setHeader('Content-Type','application/json');
                req.setMethod(reqMethod);
                req.setEndpoint(endPoint);
                req.setBody(jsonText);
                system.debug('## req ===='+req); 
                
                // send request in order to create session for accountsreceivableinvoices
                res = http.send(req);
                system.debug('##res====>'+res);
                system.debug('##Responsebody===>' + res.getBody());
                if(res.getStatusCode() == 201) {
                    System.debug('##Response body after success===>' + res.getBody());
                    System.debug('##sessionId===>'+ sessionId);     
                    return sessionId;
                   }
                else {
                    sessionId ='';
                }
                
            }
            else{
                system.debug('Access token not found');
            }
            
            
        }
        catch (Exception e){ 
            sessionId ='';
            System.debug('Error:' + e.getMessage() + 'LN:' + e.getLineNumber());           
        }
        
        return sessionId;
        
        
    }
    public static void createReceivableInvoicesDocuments() {
        
        String endPoint ;
        String baseURL;        
        String reqMethod ;
        String InvoiceReceibableURL;        
        String MIPName = 'MIPDATA';
        String jsonText;
        String AccessToken ='SI_23653_SYS_M$C_cdH7H6_n83zfG536Xki23lQ6XdA1';
        String sessionId;
        
        try {
            //get sessionId  
            sessionId =createReceivableSession();
            if(string.isNotEmpty(AccessToken) && string.isNotEmpty(sessionId)){
                
                Http http = new Http();        
                HttpResponse res = new HttpResponse();
                HttpRequest req = new HttpRequest(); 
                
                MIP_Credential__mdt MIPRec= MIP_Credential__mdt.getInstance(MIPName);
                MIPWrapperClass.UserDefinedFields udf = new MIPWrapperClass.UserDefinedFields();
                List<MIPWrapperClass.Transactions> twLst = new List<MIPWrapperClass.Transactions>();
                MIPWrapperClass.ReceivableDocumentInvoicesWrapper rdw = new MIPWrapperClass.ReceivableDocumentInvoicesWrapper();
                
                system.debug('MIPRec====>'+MIPRec);
                if(MIPRec!=Null  ){
                    
                    baseURL =MIPRec.Base_URL__c;
                    InvoiceReceibableURL =MIPRec.ReceivableURL__c;
                    reqMethod =MIPRec.RequestedMethod__c;
                    endPoint = baseURL+InvoiceReceibableURL+'/sessions/'+sessionId+'/documents';
                }
                
                system.debug('##baseURL====>'+baseURL);
                system.debug('##reqMethod====>'+reqMethod);
                system.debug('##endPoint====>'+endPoint);
                
                
                
                //create user defined 
                udf.Client_Numbers = 0;
                
                // create transaction details
                MIPWrapperClass.Transactions tw = new MIPWrapperClass.Transactions();
                tw.effectiveDate='02/07/2024';
                tw.entryTypeId ='N';
                tw.description ='Decription ARB_Session_012';
                tw.debitAmount=0;
                tw.creditAmount =333;
                tw.segment0 ='1600';
                tw.segment1='11';
                tw.segment2 ='13';
                tw.segment3 ='141';
                tw.segment4 ='1';
                tw.segment5 ='1';
                tw.userDefinedFields =udf;
                system.debug('tw====>'+tw);
                twLst.add(tw);
                
                MIPWrapperClass.Transactions tw1 = new MIPWrapperClass.Transactions();
                
                tw1.effectiveDate='02/07/2024';
                tw1.entryTypeId ='N';
                tw1.description ='Decription ARB_Session_012';
                tw1.debitAmount=222;
                tw1.creditAmount =0;
                tw1.segment0 ='1600';
                tw1.segment1='11';
                tw1.segment2 ='13';
                tw1.segment3 ='141';
                tw1.segment4 ='1';
                tw1.segment5 ='1';
                tw1.userDefinedFields =udf;
                system.debug('tw1====>'+tw1);
                twLst.add(tw1);
                system.debug('##twLst====>'+twLst);
                system.debug('##twLst Size====>'+twLst.size());
                
                // create document request body 
                rdw.documentId ='Doc_002';
                rdw.description ='Decription ARB_Session_012';
                rdw.playerId ='BRIJ001';
                rdw.documentDate ='02/07/2024';
                rdw.dueDate ='01/19/2024';
                rdw.documentAmount =0;
                rdw.transactions =twLst;
                
                system.debug('##rdw=====>'+rdw);
                
                jsonText =JSON.serialize(rdw);
                jsonText =jsonText.replace('_',' ');
                system.debug('## jsonText ===='+jsonText); 
                
                // create session request
                
                req.setHeader('Authorization-Token',AccessToken);
                req.setHeader('Content-Type','application/json');
                req.setMethod(reqMethod);
                req.setEndpoint(endPoint);
                req.setBody(jsonText);
                system.debug('## req ===='+req); 
                
                // send request in order to create session for accountsreceivableinvoices
                res = http.send(req);
                system.debug('##res====>'+res);
                system.debug('##Responsebody===>' + res.getBody());
                if(res.getStatusCode() == 201) {
                    System.debug('##Response body after success===>' + res.getBody());
                    System.debug('##sessionId===>'+ sessionId);     
                    // return sessionId;
                    
                    /* Map<String, list<Object>> results = (Map<String, list<Object>>) JSON.deserializeUntyped(res.getBody());
                    List<Object> objsessionlst=(List<Object>)results.get('data');
                    System.debug('##objsessionlst===>'+ objsessionlst); 
                   if(objsessionlst!=Null && objsessionlst.size()>0){
                  }*/
                    
                    
                }
                else {
                    sessionId ='';
                }
                
                
            }
            else{
                system.debug('Not found required details');
            }
            
        }
        catch (Exception e){ 
            sessionId ='';
            System.debug('Error:' + e.getMessage() + 'LN:' + e.getLineNumber());           
        }
        
        //   return sessionId;
        
        
    }
    public static void createReceivableCreditDocuments() {
        
        String endPoint ;
        String baseURL;        
        String reqMethod ;
        String CreditsReceibableURL;        
        String MIPName = 'MIPDATA';
        String jsonText;
        String AccessToken ='SI_23653_SYS_M$C_cdH7H6_n83zfG536Xki23lQ6XdA1';
        String sessionId;
        
        try {
            //get sessionId  
            sessionId =createReceivableSession();
            if(string.isNotEmpty(AccessToken) && string.isNotEmpty(sessionId)){
                
                Http http = new Http();        
                HttpResponse res = new HttpResponse();
                HttpRequest req = new HttpRequest(); 
                
                MIP_Credential__mdt MIPRec= MIP_Credential__mdt.getInstance(MIPName);
                MIPWrapperClass.UserDefinedFields_C udcf = new MIPWrapperClass.UserDefinedFields_C();
				MIPWrapperClass.UserDefinedFields_Z udzf = new MIPWrapperClass.UserDefinedFields_Z();
                List<MIPWrapperClass.Transactions_C> tcwLst = new List<MIPWrapperClass.Transactions_C>();
                MIPWrapperClass.ReceivableDocumentCreditWrapper rdw = new MIPWrapperClass.ReceivableDocumentCreditWrapper();
                
                system.debug('MIPRec====>'+MIPRec);
                if(MIPRec!=Null  ){
                    
                    baseURL =MIPRec.Base_URL__c;
                    CreditsReceibableURL =MIPRec.Credits_Receivable_URL__c;
                    reqMethod =MIPRec.RequestedMethod__c;
                    endPoint = baseURL+CreditsReceibableURL+'/sessions/'+sessionId+'/documents';
                }
                
                system.debug('##baseURL====>'+baseURL);
                system.debug('##reqMethod====>'+reqMethod);
                system.debug('##endPoint====>'+endPoint);
                
               //create user defined C record
                 
                udcf.editable ='Default Text' ;
                udcf.noneeditable ='001' ;
                udcf.udfdoc01 ='' ;
                udcf.udfdoc02 ='' ;
                //create user defined Z record
                udzf.EditableTransLines ='Default Trans Lines';
                udzf.NoneEditableTransLines ='002';
                udzf.UDFboolean =true;
                udzf.UdfString ='String Default';
                udzf.udft01 =15;
                udzf.udft02 =0;
                
                // create transaction details
                MIPWrapperClass.Transactions_C tw = new MIPWrapperClass.Transactions_C();
                tw.creditAmount =222;
                tw.debitAmount=0;
                tw.effectiveDate='02/07/2024';
                tw.description ='Decription ARB_Session_012';
                tw.entryTypeId ='N';
                tw.invoiceAppliedToId =0.00;
                tw.segment0 ='16301';
                tw.segment1='01';
                tw.segment2 ='990';
                tw.segment3 ='';
                tw.segment4 ='';
                tw.segment5 ='';
               // tw.userDefinedFields =udf;
                system.debug('tw====>'+tw);
               // twLst.add(tw);
                
                MIPWrapperClass.Transactions_C tw1 = new MIPWrapperClass.Transactions_C();
                
                tw1.effectiveDate='02/07/2024';
                tw1.entryTypeId ='N';
                  tw.invoiceAppliedToId =0.00;
                tw1.description ='Decription ARB_Session_012';
                tw1.debitAmount=222;
                tw1.creditAmount =0;
                tw1.segment0 ='1600';
                tw1.segment1='11';
                tw1.segment2 ='13';
                tw1.segment3 ='141';
                tw1.segment4 ='1';
                tw1.segment5 ='1';
               // tw1.userDefinedFields =udf;
                system.debug('tw1====>'+tw1);
               // twLst.add(tw1);
              //  system.debug('##twLst====>'+twLst);
              //  system.debug('##twLst Size====>'+twLst.size());
                
                // create document request body 
                rdw.documentId ='Doc_002';
                rdw.description ='Decription ARB_Session_012';
                rdw.playerId ='BRIJ001';
                rdw.documentDate ='02/07/2024';
               // rdw.dueDate ='01/19/2024';
                rdw.documentAmount =0;
               // rdw.transactions =twLst;
                
                system.debug('##rdw=====>'+rdw);
                
                jsonText =JSON.serialize(rdw);
                jsonText =jsonText.replace('_',' ');
                system.debug('## jsonText ===='+jsonText); 
                
                // create session request
                
                req.setHeader('Authorization-Token',AccessToken);
                req.setHeader('Content-Type','application/json');
                req.setMethod(reqMethod);
                req.setEndpoint(endPoint);
                req.setBody(jsonText);
                system.debug('## req ===='+req); 
                
                // send request in order to create session for accountsreceivableinvoices
                res = http.send(req);
                system.debug('##res====>'+res);
                system.debug('##Responsebody===>' + res.getBody());
                if(res.getStatusCode() == 201) {
                    System.debug('##Response body after success===>' + res.getBody());
                    System.debug('##sessionId===>'+ sessionId);     
                    // return sessionId;
                    
                    /* Map<String, list<Object>> results = (Map<String, list<Object>>) JSON.deserializeUntyped(res.getBody());
                    List<Object> objsessionlst=(List<Object>)results.get('data');
                    System.debug('##objsessionlst===>'+ objsessionlst); 
                   if(objsessionlst!=Null && objsessionlst.size()>0){
                  }*/
                    
                    
                }
                else {
                    sessionId ='';
                }
                
                
            }
            else{
                system.debug('Not found required details');
            }
            
        }
        catch (Exception e){ 
            sessionId ='';
            System.debug('Error:' + e.getMessage() + 'LN:' + e.getLineNumber());           
        }
        
        //   return sessionId;
        
        
    }
   
}