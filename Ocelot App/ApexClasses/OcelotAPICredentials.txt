@RestResource(urlMapping='/OcelotAPICredentials/*')
global with sharing class OcelotAPICredentials { 
 
    @HttpPost
    global static void OcelotAPICredentials() {
        
        RestRequest req = RestContext.request;
        RestResponse res = RestContext.response;
        List<API_Credentials__c> ApiCredList= new List<API_Credentials__c>(); 
        List<API_Credentials__c> ApiCredRecList= new List<API_Credentials__c>();
        List<API_Credentials__c> ApiCredRecListNew= new List<API_Credentials__c>();
        OcelotAPICredentialsWpr OcelotApiCredWrp = new OcelotAPICredentialsWpr(); 
        
        RestContext.response.addHeader('Content-Type', 'application/json');  
        RestContext.response.responseBody = req.requestBody;      
        
        String requestBody= req.requestBody.toString();
        OcelotApiCredWrp = (OcelotAPICredentialsWpr)System.JSON.deserialize(requestBody,OcelotAPICredentialsWpr.class);
        
        if(OcelotApiCredWrp !=Null){
            ApiCredRecList = [Select id,API_Key__c,Base_URL__c,Chatbot_UUID__c from API_Credentials__c];
            
            API_Credentials__c ApiCred = new API_Credentials__c();
            String baseDomainURL;
            
            ApiCred.Chatbot_UUID__c =OcelotApiCredWrp.chatbotUUID;  
            ApiCred.API_Key__c =OcelotApiCredWrp.APIKEY;
            baseDomainURL= OcelotApiCredWrp.baseDomain+'/api/v1';
            ApiCred.Base_URL__c =baseDomainURL;
            
            if(ApiCredRecList!=NULL && ApiCredRecList.size()>0){
                ApiCred.Id= ApiCredRecList[0].id;
            }
            ApiCredList.add(ApiCred);
        }
        if(ApiCredList!=Null && ApiCredList.size()>0 ){
            upsert ApiCredList;
        }
        
       }

  
}